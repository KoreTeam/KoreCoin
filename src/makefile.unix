# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

USE_UPNP:=0

LINK:=$(CXX)
ARCH:=$(system lscpu | head -n 1 | awk '{print $2}')

DEFS=-DBOOST_SPIRIT_THREADSAFE

DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/tor $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))

LMODE = dynamic
LMODE2 = dynamic
ifdef STATIC
	LMODE = static
	ifeq (${STATIC}, all)
		LMODE2 = static
	endif
endif

# for boost 1.37, add -mt to the boost libraries
LIBS += \
 -Wl,-B$(LMODE) \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l ssl \
   -l crypto \
   -l event \
   -l rt

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBS += -l miniupnpc
	DEFS += -DUSE_UPNP=$(USE_UPNP)
endif

LIBS+= \
 -Wl,-B$(LMODE2) \
   -l z \
   -l dl \
   -l pthread


# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    LDHARDENING+=-Wl,-z,relro -Wl,-z,now

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    ifdef PIE
        HARDENING+=-fPIE
        LDHARDENING+=-pie
    endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    HARDENING+=-D_FORTIFY_SOURCE=2
#


DEBUGFLAGS=-g


ifeq (${ARCH}, i686)
    EXT_OPTIONS=-msse2
endif


# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=-O2 $(EXT_OPTIONS) -pthread -Wextra -Wno-format -Wno-ignored-qualifiers -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)

OBJS= \
    obj/tor/address.o \
    obj/tor/addressmap.o \
    obj/tor/aes.o \
    obj/tor/backtrace.o \
    obj/tor/buffers.o \
    obj/tor/channel.o \
    obj/tor/channeltls.o \
    obj/tor/circpathbias.o \
    obj/tor/circuitbuild.o \
    obj/tor/circuitlist.o \
    obj/tor/circuitmux.o \
    obj/tor/circuitmux_ewma.o \
    obj/tor/circuitstats.o \
    obj/tor/circuituse.o \
    obj/tor/command.o \
    obj/tor/compat.o \
    obj/tor/compat_libevent.o \
    obj/tor/config.o \
    obj/tor/config_codedigest.o \
    obj/tor/confparse.o \
    obj/tor/connection.o \
    obj/tor/connection_edge.o \
    obj/tor/connection_or.o \
    obj/tor/container.o \
    obj/tor/control.o \
    obj/tor/cpuworker.o \
    obj/tor/crypto.o \
    obj/tor/crypto_curve25519.o \
    obj/tor/crypto_format.o \
    obj/tor/curve25519-donna.o \
    obj/tor/di_ops.o \
    obj/tor/directory.o \
    obj/tor/dirserv.o \
    obj/tor/dirvote.o \
    obj/tor/dns.o \
    obj/tor/dnsserv.o \
    obj/tor/entrynodes.o \
    obj/tor/ext_orport.o \
    obj/tor/fp_pair.o \
    obj/tor/geoip.o \
    obj/tor/hibernate.o \
    obj/tor/log.o \
    obj/tor/memarea.o \
    obj/tor/mempool.o \
    obj/tor/microdesc.o \
    obj/tor/networkstatus.o \
    obj/tor/nodelist.o \
    obj/tor/onion.o \
    obj/tor/onion_fast.o \
    obj/tor/onion_main.o \
    obj/tor/onion_ntor.o \
    obj/tor/onion_tap.o \
    obj/tor/policies.o \
    obj/tor/procmon.o \
    obj/tor/reasons.o \
    obj/tor/relay.o \
    obj/tor/rendclient.o \
    obj/tor/rendcommon.o \
    obj/tor/rendmid.o \
    obj/tor/rendservice.o \
    obj/tor/rephist.o \
    obj/tor/replaycache.o \
    obj/tor/router.o \
    obj/tor/routerlist.o \
    obj/tor/routerparse.o \
    obj/tor/routerset.o \
    obj/tor/sandbox.o \
    obj/tor/statefile.o \
    obj/tor/status.o \
    obj/tor/torgzip.o \
    obj/tor/tortls.o \
    obj/tor/tor_util.o \
    obj/tor/transports.o \
    obj/tor/util_codedigest.o \
    obj/tor/korecoin.o \
    obj/x13/fugue.o \
    obj/x13/hamsi.o \
    obj/x13/groestl.o \
    obj/x13/blake.o \
    obj/x13/bmw.o \
    obj/x13/skein.o \
    obj/x13/keccak.o \
    obj/x13/shavite.o \
    obj/x13/jh.o \
    obj/x13/luffa.o \
    obj/x13/cubehash.o \
    obj/x13/echo.o \
    obj/x13/simd.o \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/keystore.o \
    obj/miner.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-arm.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o 

all: korecoind

LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT="$(CFLAGS)" libleveldb.a libmemenv.a && cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a

# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-arm.o: scrypt-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/tor/%.o: tor/%.c
	$(CC) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
        sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
                -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
        rm -f $(@:%.o=%.d)

obj/tor/%.o: tor/korecoin.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
        sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
                -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
        rm -f $(@:%.o=%.d)

obj/x13/%.o: x13/%.c
	$(CXX) -c $(xCXXFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

korecoind: $(OBJS:obj/%=obj/%)
	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)

clean:
	-rm -f korecoind
	-rm -f obj/*.o
	-rm -f obj/tor/*.o
	-rm -f obj/tor/*.P
	-rm -f obj/*.P
	-rm -f obj/*.d
	-rm -f obj/build.h
	-rm -f obj/x13/*.o
	-rm -f obj/x13/*.P
	cd leveldb && $(MAKE) clean && cd ..

FORCE:
